import java.io.*;
import java.util.*;

public class Solution {

    public static int solve(int N, int B) {
        int[][] dp = new int[N + 1][B + 1];

        for(int i = 0; i <= N; i++) {
            for(int j = 0; j <= B; j++){
                if(i == 0) {
                    dp[i][j] = 0;
                } else dp[i][j] = -1;
            }
        }

        return getMaxArea(dp, N, B);
    }

    public static int getMaxArea(int[][] dp, int N, int B) {
        if(dp[N][B] != -1) {
            return dp[N][B];
        }

        int maxArea = 0;
        for(int width = 1; width < B; width++) {
            int currArea = width * (B - width) + getMaxArea(dp, N - 1, width);

            if(currArea > maxArea) {
                maxArea = currArea;
            }
        }

        return (dp[N][B] = maxArea);
    }
    
    public static void main(String[] args) {
        FastReader reader = new FastReader();
        StringBuilder result = new StringBuilder();
        int T = reader.nextInt();
        int N, B;

        for(int t = 0; t < T; t++) {
            N = reader.nextInt();
            B = reader.nextInt();

            result.append(solve(N, B)).append("\n");
        }

        System.out.println(result);
        reader.close();
    }
    
    
    public static class FastReader {

    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    public String next() {
        while(st == null || !st.hasMoreElements()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch(IOException e) {
                e.printStackTrace();
            }
        }

        return st.nextToken();
    }

    public String nextChar() {
        while(st == null || !st.hasMoreElements()) {
            try {
                st = new StringTokenizer(String.valueOf((char) br.read()));
            } catch(IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

    public double nextDouble() {
        return Double.parseDouble(next());
    }

    public String nextLine() {
        String str = "";
        try {
            str = br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return str;
    }

    public void close() {
        try {
            br.close();

        } catch(IOException e) {

           e.printStackTrace();
        }
    }

}

}